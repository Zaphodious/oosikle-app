export component MinButton {
    height: 40px;
    accessible-role: AccessibleRole.button;
    in property <bool> disabled: false;
    in property <bool> highlighted: false;
    out property <bool> has-hover: !disabled && toucharea.has-hover;
    out property <bool> pressed: !disabled && toucharea.pressed;
    in property <image> icon: @image-url("testing_icons/Solar-Outline/Electronic, Devices/Gameboy.svg");
    rect := Rectangle {
        background: black;
        border-color: white;
        border-width: 0px;
        border-radius: 20px;
        toucharea := TouchArea {
            mouse-cursor: disabled ? MouseCursor.default : MouseCursor.pointer;
            HorizontalLayout {
                alignment: LayoutAlignment.stretch;

                iconback := Rectangle {
                    border-radius: 20px;
                    width: rect.height + 5px;
                    border-width: 4px;


                    theicon := Image {
                        source: icon;
                        width: rect.height - 14px;
                        height: rect.height - 14px;
                        padding: 2.5px;
                        colorize: white;
                    }
                }

                Rectangle {
                    width: 5px;
                }

                thetext := Text {
                    font-size: 12pt;
                    overflow: TextOverflow.elide;
                    text: "hello world :3";
                    height: rect.height;
                    vertical-alignment: center;
                    horizontal-alignment: left;
                }

                Rectangle {
                    width: 15px;
                }
            }
        }
    }

    states [
        disabled when self.disabled: {
            rect.background: #222;
            thetext.color: #666;
            theicon.colorize: #666;
            rect.border-color: #333;
        }
        up-highlighted when highlighted && !toucharea.pressed && !toucharea.has-hover: {
            rect.background: #777;
            rect.border-color: white;
            rect.border-width: 4px;
            iconback.border-color: white;
            iconback.background: #777;
            thetext.color: white;
            thetext.stroke: #999;
            thetext.horizontal-alignment: center;
        }
        hover-highlighted when highlighted && !toucharea.pressed && toucharea.has-hover: {
            rect.background: white;
            rect.border-color: #999;
            rect.border-width: 4px;
            iconback.border-color: #999;
            thetext.color: #999;
            thetext.stroke: #aaa;
            theicon.colorize: #999;
            iconback.background: white;
            thetext.horizontal-alignment: center;
        }
        pressed-highlighted when highlighted && toucharea.pressed: {
            rect.background: #353535;
            rect.border-color: #ddd;
            rect.border-width: 4px;
            iconback.border-color: #ddd;
            //thetext.stroke: #333;
            iconback.background: #353535;
            thetext.color: #ddd;
            theicon.colorize: #ddd;
            thetext.horizontal-alignment: center;
        }
        up when !toucharea.pressed && !toucharea.has-hover: {
            rect.background: #353535;
            iconback.border-color: #353535;
            //thetext.stroke: #333;
            iconback.background: #ddd;
            thetext.color: #ddd;
            theicon.colorize: #353535;
        }
        hover when !toucharea.pressed && toucharea.has-hover: {
            rect.background: #999;
            iconback.border-color: #999;
            thetext.color: white;
            thetext.stroke: #888;
            theicon.colorize: #999;
            iconback.background: white;
        }
        pressed when toucharea.pressed: {
            rect.background: white;
            iconback.border-color: white;
            iconback.background: #777;
            thetext.color: #777;
            thetext.stroke: #999;

        }
    ]
}
