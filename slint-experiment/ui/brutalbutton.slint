import { BrutalBrushSet, BrutalBrushes } from "brutalcolors.slint";
/*
enum BrutalButtonLayout {
    AllLeft,
    TextCenter,
    AllCenter,
    NoIcon,
    RightText,
    }
*/

export component BrutalButton {
    height: 40px;
    accessible-role: AccessibleRole.button;
    in property <BrutalBrushSet> brushes: BrutalBrushes.ButtonColorsMain;
    in property <BrutalBrushSet> text-colors: BrutalBrushes.ButtonTextColorsMain;
    in property <BrutalBrushSet> icon-colors: BrutalBrushes.ButtonIconColorsMain;
    in property <bool> disabled: false;
    in property <bool> active: true;
    in-out property <bool> selected: false;
    in property <bool> selectable: false;
    out property <bool> has-hover: toucharea.has-hover;
    out property <bool> pressed: toucharea.pressed;
    in property <image> icon: @image-url("testing_icons/Solar-Outline/Electronic, Devices/Gameboy.svg");
    in property <string> text: "Lorum ipsum dolor set amet";
    in property <length> font-size: 11pt;
    //in property <BrutalButtonLayout> layout: BrutalButtonLayout.TextCenter;
    in property <TextHorizontalAlignment> text_alignment: TextHorizontalAlignment.center;
    in property <bool> hide-text: false;
    in property <bool> hide-icon: false;

    callback clicked <=> toucharea.clicked;
    callback double-clicked <=> toucharea.double-clicked;
    callback was-selected;
    callback was-unselected;

    main_rect := Rectangle {
        clip: true;
        shadow_rect := Rectangle {
            background: black;
            border-radius: 8px;
            height: parent.height - 8px;
            width: parent.width - 10px;
            x: 6px;
            y: 6px;
        }

        button_rect := Rectangle {
            border-radius: 8px;
            height: parent.height - 8px;
            width: parent.width - 10px;
            border-width: 2px;
            border-color: black;
            x: 3px;
            y: 3px;

            animate x, y {
                easing: ease-in-quad;
                duration: 50ms;
            }
            toucharea := TouchArea {
                enabled: active || !disabled;
                mouse-cursor: disabled ? MouseCursor.default : MouseCursor.pointer;
                clicked => {
                    if (selectable) {
                        selected = !selected;
                        if (selected) {
                            was-selected();
                        } else {
                            was-unselected()
                        }
                    } else {
                    }
                }
                width: 100%;
                height: 100%;
                layout-container := HorizontalLayout {
                    spacing: 0px;
                    icon_container := Rectangle {
                    //background: blue;
                    height: hide-icon ? 0px : button_rect.height;
                        width: hide-icon ? 0px : button_rect.height;
                        the_icon := Image {
                            x: 5px;
                            y: 5px;
                            height: parent.height - 10px;
                            width: parent.height - 10px;
                            colorize: icon-colors.primary;
                            source: icon;
                        }
                    }

                    text_container := Rectangle {
                        width: hide-text ? 0px : toucharea.width - (hide-icon ? 10px : (toucharea.height + 10px));
                        the_text := Text {
                            width: 100%;
                            text: hide-text ? "" : text;
                            font-size: font-size;
                            vertical-alignment: center;
                            horizontal-alignment: text_alignment;
                            color: text-colors.primary;
                        }
                    }
                }
            }
        }
    }
/*
    states [
        all-left when layout == BrutalButtonLayout.AllLeft: {
            text_container.width: toucharea.width - (toucharea.height * 1.5);
            the_text.width: text_container.width + 5px;
            the_text.horizontal_alignment: left;
        }
        center-text when layout == BrutalButtonLayout.TextCenter: {
            text_container.width: toucharea.width - (toucharea.height * 1.5);
            the_text.width: 100%;
            the_text.horizontal_alignment: center;
            

            }
        all-center when layout == BrutalButtonLayout.AllCenter: {
            text_container.width: 100%;
            the_text.width: text_container.width + 2px;
            text_container.clip: false;
            the_text.horizontal_alignment: right;
            layout-container.alignment: center;
            }
    ]
*/

    states [
        disabled when self.disabled: {
            button_rect.height: self.height - 4px;
            button_rect.width: self.width - 4px;
            button_rect.border-radius: 2px;
            button_rect.color: grey;
            the_icon.colorize: #444444;
            the_text.color: #444444;
            shadow_rect.background: #44444400;
            button_rect.border-color: #222;
        }
        up-selected when selected && !toucharea.pressed && !toucharea.has-hover: {
            button_rect.background: brushes.tertiary;
            the_text.color: text-colors.tertiary;
            the_icon.colorize: icon-colors.tertiary;
            button_rect.border-width: 2px;
            shadow_rect.background: #00000000;
            button_rect.x: 5px;
            button_rect.y: 5px;
        }
        hover-selected when selected && !toucharea.pressed && toucharea.has-hover: {
            button_rect.background: brushes.tertiary;
            the_text.color: text-colors.tertiary;
            the_icon.colorize: icon-colors.tertiary;
            button_rect.x: 5px;
            button_rect.y: 5px;
        }
        pressed-selected when selected && toucharea.pressed: {
            button_rect.background: brushes.primary;
            the_text.color: text-colors.primary;
            the_icon.colorize: icon-colors.primary;
            button_rect.x: 6px;
            button_rect.y: 6px;
        }
        up when !toucharea.pressed && !toucharea.has-hover: {
            button_rect.background: brushes.primary;
            the_text.color: text-colors.primary;
            the_icon.colorize: icon-colors.primary;
        }
        hover when !toucharea.pressed && toucharea.has-hover: {
            button_rect.background: brushes.secondary;
            the_text.color: text-colors.secondary;
            the_icon.colorize: icon-colors.secondary;
            button_rect.x: 2px;
            button_rect.y: 2px;
        }
        pressed when toucharea.pressed: {
            button_rect.background: brushes.tertiary;
            the_text.color: text-colors.tertiary;
            the_icon.colorize: icon-colors.tertiary;
            button_rect.x: selectable ? 7px : 4px;
            button_rect.y: selectable ? 7px : 4px;
        }
    ]
}
