
import { Playlist } from "datamodel.slint";
import { BrutalPanel } from "brutalpanel.slint";
import { ListView } from "std-widgets.slint";
import { BrutalBrushes } from "brutalcolors.slint";
import { BrutalButton } from "brutalbutton.slint";
import { BrutalScrollBar } from "brutalscrollbar.slint";

export struct TableRow {
    values: [string],
    drag-value: string,
    selected: bool,
    }

export component BrutalSelectedPlaylistView {
    in-out property <Playlist> selected-playlist;
    horizontal-stretch: 1;
    vertical-stretch: 1;

    Rectangle {
        background: BrutalBrushes.AppColorsBackground.tertiary;
        //width: parent.width - 10px;
        x: 5px;
        y: 5px;
        width: parent.width - bscrollbar.width - 10px;
        height: parent.height - 10px;
        clip: true;
        border-radius: 10px;
        border-color: black;
        border-width: 2px;
        Rectangle { // otherwise rounded borders look bad because of clip overlap
        border-radius: 15px;
            clip: true;

            VerticalLayout {
                Rectangle {
                    height: 60px;
                    background: BrutalBrushes.AppColorsBackground.secondary;
                    border-color: black;
                    border-width: 2px;
                }

                Rectangle {
                    height: 40px;
                    Rectangle { }
                }

                Rectangle {

                    Rectangle {
                        x: 0;

                        border-radius: 10px;
                        border-color: black;
                        border-width: 2px;
                        Rectangle {
                            height: parent.height;
                            x: 0;
                            border-color: black;
                            border-width: 2px;
                            clip: true;
                            background: BrutalBrushes.AppColorsBackground.secondary;

                            Rectangle {
                                border-color: black;
                                border-width: 2px;

                            background: BrutalBrushes.AppColorsBackground.primary;
                                listo := ListView {
                                    x: 2px;
                                    y: 2px;
                                    width: parent.width - 4px;
                                    height: parent.height - 4px;
                                    horizontal-stretch: 1;
                                    vertical-stretch: 1;
                                    vertical-scrollbar-policy: ScrollBarPolicy.always-off;
                                    horizontal-scrollbar-policy: ScrollBarPolicy.always-off;
                                    for playlistitem[ind] in selected-playlist.items: Rectangle {
                                        height: 40px;
                                        background: {
                                            if (mod(ind, 2) == 0) {
                                                BrutalBrushes.PlaylistViewItemBrushes.primary
                                            } else {
                                                BrutalBrushes.PlaylistViewItemBrushes.secondary
                                            }
                                        };
                                        init => {
                                            debug(playlistitem);
                                        }

                                        HorizontalLayout {
                                            width: 100%;
                                            height: 100%;
                                            Rectangle {
                                                border-radius: 10px;
                                                Text {
                                                    text: playlistitem.name;
                                                    color: black;
                                                }
                                            }

                                            Rectangle {
                                                Text {
                                                    text: playlistitem.filename;
                                                    color: black;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bscrollbar := BrutalScrollBar {
        x: listo.width + 12px;
        height: parent.height;
        visible-length: listo.visible-height;
        viewport-length: listo.viewport-height;
        viewport-position <=> listo.viewport-y;
    }
}
